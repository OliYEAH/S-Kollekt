package applicationLogic;

import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;

import dataAccess.DataAccess;
public class BoxHistoryManager {

	private ArrayList<BoxHistory> allBoxHistories;
	private static BoxHistoryManager instance=null;
	private SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
	
	public ArrayList<BoxHistory> getAllBoxHistories() {
		return allBoxHistories;
	}
	public void setAllBoxHistories(ArrayList<BoxHistory> allBoxHistories) {
		this.allBoxHistories = allBoxHistories;
	}
	public BoxHistoryManager() {
		allBoxHistories = new ArrayList<BoxHistory>();
	}
	
	public static BoxHistoryManager getInstance() {
		if (instance == null)
			instance = new BoxHistoryManager();
		return instance;
	}
	
	public BoxHistory getBoxHistoryWithId (int boxHistoryId)
	{
		BoxHistory result=null;
		Iterator<BoxHistory> itBoxHistory=BoxHistoryManager.getInstance().getAllBoxHistories().iterator();
		while (itBoxHistory.hasNext())
		{
			BoxHistory tempBoxHistory=itBoxHistory.next();
			if (tempBoxHistory.getBoxHistoryId()==boxHistoryId) result=tempBoxHistory;
		}
		return result;
		}
  /**
   * 
   * @param donationBoxId the box id
   * @return
   */
	public ArrayList<BoxHistory> getBoxHistoriesWithDonationBoxId (int donationBoxId)
	{
		ArrayList<BoxHistory> result=new ArrayList<BoxHistory> ();
		ArrayList<BoxHistory> tempBoxHistories=BoxHistoryManager.getInstance().getAllBoxHistories();
		Iterator<BoxHistory>  tempIt=tempBoxHistories.iterator();
		while (tempIt.hasNext()) 
		{
			BoxHistory tempBoxHistory=tempIt.next();
			if (tempBoxHistory.getBoxId()==donationBoxId)
			    result.add(tempBoxHistory);
			
		}
		return result;
	}
	
	public ArrayList<BoxHistory> getBoxHistoriesWithCollectionId (int collectionId)
	{
		ArrayList<BoxHistory> result=new ArrayList<BoxHistory> ();
		ArrayList<BoxHistory> tempBoxHistories=BoxHistoryManager.getInstance().getAllBoxHistories();
		Iterator<BoxHistory>  tempIt=tempBoxHistories.iterator();
		while (tempIt.hasNext()) 
		{
			BoxHistory tempBoxHistory=tempIt.next();
			if (tempBoxHistory.getCollectionId()==collectionId)
			    result.add(tempBoxHistory);
			
		}
		return result;
	}
	
	public BoxHistory getBoxHistoriesWithBoxIdandCollectionIdandEndDateNull (int boxId,int collectionId)
	{
		BoxHistory result=null;
		ArrayList<BoxHistory> tempBoxHistories=BoxHistoryManager.getInstance().getAllBoxHistories();
		Iterator<BoxHistory>  tempIt=tempBoxHistories.iterator();
		while (tempIt.hasNext()) 
		{
			BoxHistory tempBoxHistory=tempIt.next();
			if (tempBoxHistory.getBoxHistoryId()==boxId && 
					tempBoxHistory.getCollectionId()==collectionId && tempBoxHistory.getEndDate()==null)
			    result=tempBoxHistory;
			
		}
		return result;
	}
	
	public  void  loadBoxHistories() throws SQLException, ParseException 
	{
		ArrayList<BoxHistory> tempBoxHistories=DataAccess.getInstance().getBoxHistoriesFromDB();
		BoxHistory.setNextBoxHistoryId(DataAccess.getInstance().getNextBoxHistoryIdFromDB());
		BoxHistoryManager.getInstance().setAllBoxHistories(tempBoxHistories);
	}

	public  void  saveBoxHistories(BoxHistory boxHistory
			) throws SQLException, ParseException
	{
		DataAccess.getInstance().storeBoxHistoryIntoDB(boxHistory);
		DataAccess.getInstance().storeNextBoxHistoryIdIntoDB(BoxHistory.getNextBoxHistoryId());
		BoxHistoryManager.getInstance().loadBoxHistories();
	}
	
	public  void  editBoxHistories(BoxHistory boxHistory
			) throws SQLException, ParseException
	{
		DataAccess.getInstance().editBoxHistoryInDB(boxHistory);
		BoxHistoryManager.getInstance().loadBoxHistories();
	}
	
	/*public  void  editEndDateInBoxHistories(BoxHistory boxHistory
			) throws SQLException, ParseException
	{
		DataAccess.getInstance().editBoxHistoryInDB(boxHistory);
		BoxHistoryManager.getInstance().loadBoxHistories();
	}**/
	
	
	public void create(int boxId, int collectionId) throws SQLException, ParseException{
		BoxHistory boxHistory=new BoxHistory(boxId,collectionId,Calendar.getInstance(),null) ;
	    BoxHistoryManager.getInstance().saveBoxHistories(boxHistory);
	}
	
	public void setEndDateNull(int boxId,int collectionId) throws SQLException, ParseException{
		   BoxHistory temp=BoxHistoryManager.getInstance().
		                                       getBoxHistoriesWithBoxIdandCollectionIdandEndDateNull(boxId, collectionId);
		   temp.setEndDate(Calendar.getInstance());
		   BoxHistoryManager.getInstance().editBoxHistories(temp);
	}
	
	
	public void createForNewDonationBoxesBoxHistoryWithSetDateNull(ArrayList<DonationBox> allBoxes) throws SQLException, ParseException
	{
		Iterator<DonationBox> itAllBoxes=allBoxes.iterator();
		while (itAllBoxes.hasNext()) {
			DonationBox tempBox=itAllBoxes.next();
		if (BoxHistoryManager.getInstance().getBoxHistoriesWithBoxIdandCollectionIdandEndDateNull(tempBox.getBoxId(), tempBox.getCollectionId())==null)
			BoxHistoryManager.getInstance().create(tempBox.getBoxId(),tempBox.getCollectionId());
		}
	}
	
	}
